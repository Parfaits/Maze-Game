package model;

import java.util.Arrays;
import java.util.Random;

/**
 * This class gets and sets the position of the cat.
 * It also allows random cat movement upon random number input generated by random number generator.
 * It also checks to see if the cat position == player position.
 */

public class Cat {
    private int xPos;
    private int yPos;

    Cat(int xPos, int yPos) {
        this.xPos = xPos;
        this.yPos = yPos;
    }

    int getXPos() {
        return xPos;
    }

    int getYPos() {
        return yPos;
    }

    // cat has an origin position - reset cat position
    public void setPostionCat(int xPos, int yPos) {
        this.xPos = xPos;
        this.yPos = yPos;
    }

    // gets position of the cat in [x, y] form
    public int[] getCatPosition(){
        int[] pos = {getXPos(), getYPos()};
        return pos;
    }

    // generates random numbers from 0-3 to satisfy one of the four conditions in cat movement
    private int generateRandomNum(){
        Random rand = new Random();
        int upperbound = 3;
        int random = rand.nextInt(upperbound);
        return random;
    }

    // saves position of cat's x and y coordinates upon calling random - use setPosition() to reset position.
    // FIXME: 2020-02-13 Bug where cat's previous position still has itself. // Fixed
    void move(MazeElement[][] board){
        int randNum = generateRandomNum();
        switch (randNum) {
            case 0:
                if (board[yPos-1][xPos] != MazeElement.WALL){
                    board[yPos-1][xPos] = MazeElement.CAT;
                    board[yPos][xPos] = MazeElement.PASSAGE;
                    yPos--;
                }
                break;

            case 1:
                if (board[yPos+1][xPos] != MazeElement.WALL){
                    board[yPos+1][xPos] = MazeElement.CAT;
                    board[yPos][xPos] = MazeElement.PASSAGE;
                    yPos++;
                }
                break;

            case 2:
                if (board[yPos][xPos-1] != MazeElement.WALL){
                    board[yPos][xPos-1] = MazeElement.CAT;
                    board[yPos][xPos] = MazeElement.PASSAGE;
                    xPos--;
                }
                break;

            case 3:
                if (board[yPos][xPos+1] != MazeElement.WALL){
                    board[yPos][xPos+1] = MazeElement.CAT;
                    board[yPos][xPos] = MazeElement.PASSAGE;
                    xPos++;
                }
                break;

            default:
                System.out.println("Please try one of the following to update cat position: 0(up), 1(down), 2(left), 3(right)");
                break;
        }
    }

    boolean isValidMove(MazeElement[][] board) {
        int randNum = generateRandomNum();
        switch (randNum) {
            case 0:
                if (board[yPos - 1][xPos] != MazeElement.WALL) {
                    System.out.println("bro why");
                    return true;
                }
                break;

            case 1:
                if (board[yPos + 1][xPos] != MazeElement.WALL) {
                    return true;
                }
                break;

            case 2:
                if (board[yPos][xPos - 1] != MazeElement.WALL) {
                    return true;

                }
                break;

            case 3:
                if (board[yPos][xPos + 1] != MazeElement.WALL) {
                    return true;
                }
                break;

            default:
                return false;
        }

        return false;
    }

    // If cat position == player position, player isDead true.
    public boolean isPlayerEaten(int[] playerPos){
        return getCatPosition() == playerPos;
    }

    // Prints the position of the cat.
    public void printCatPos(){
        System.out.println("Cat position is : " + xPos + " " + yPos);
    }
}
