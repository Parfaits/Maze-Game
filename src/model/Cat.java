package model;

import java.util.Random;

/**
 * This class gets and sets the position of the cat.
 * It also allows random cat movement upon random number input generated by random number generator.
 * It also checks to see if the cat position == player position.
 */

class Cat {
    private int xPos;
    private int yPos;
    private int prevXPos;
    private int prevYPos;

    Cat(int xPos, int yPos) {
        this.xPos = xPos;
        this.yPos = yPos;
        this.prevXPos = xPos;
        this.prevYPos = yPos;
    }

    private int getXPos() {
        return xPos;
    }

    private int getYPos() {
        return yPos;
    }

    // gets position of the cat in [x, y] form
    int[] getCatPosition(){
        return new int[]{getXPos(), getYPos()};
    }

    // generates random numbers from 0-3 to satisfy one of the four conditions in cat movement
    private int generateRandomNum(){
        Random rand = new Random();
        int upperBound = 4;
        return rand.nextInt(upperBound);
    }

    private void updatePrevPositions(){
        prevXPos = xPos;
        prevYPos = yPos;
    }

    // saves position of cat's x and y coordinates upon calling random - use setPosition() to reset position.
    void move(MazeElement[][] board, Player player){
        if (board[yPos][xPos] == MazeElement.PLAYER) {
            player.setDead();
            return;
        }
        int[] cheesePos = MazeGame.getCheesePosition();
        int randNum = generateRandomNum();
        switch (randNum) {
            case 0:
                if (board[yPos-1][xPos] != MazeElement.WALL){
                    if (board[yPos-1][xPos] == MazeElement.PLAYER){
                        player.setDead();
                    }

                    if (yPos-1 != prevYPos){
                        moveUp(board, cheesePos);

                        updatePrevPositions();
                        yPos--;
                    }
                }
                break;

            case 1:
                if (board[yPos+1][xPos] != MazeElement.WALL){
                    if (board[yPos+1][xPos] == MazeElement.PLAYER){
                        player.setDead();
                    }

                    if (yPos+1 != prevYPos){
                        moveDown(board, cheesePos);

                        updatePrevPositions();
                        yPos++;
                    }
                }
                break;

            case 2:
                if (board[yPos][xPos-1] != MazeElement.WALL){
                    if (board[yPos][xPos-1] == MazeElement.PLAYER){
                        player.setDead();
                    }



                    if (xPos-1 != prevXPos){
                        moveLeft(board, cheesePos);

                        updatePrevPositions();
                        xPos--;
                    }
                }
                break;

            case 3:
                if (board[yPos][xPos+1] != MazeElement.WALL){
                    if (board[yPos][xPos+1] == MazeElement.PLAYER){
                        player.setDead();
                    }



                    if (xPos+1 != prevXPos){
                        moveRight(board, cheesePos);

                        updatePrevPositions();
                        xPos++;
                    }
                }
                break;

            default:
                break;
        }
    }

    private void moveRight(MazeElement[][] board, int[] cheesePos) {
        board[yPos][xPos+1] = MazeElement.CAT;

        if (yPos == cheesePos[1] && xPos == cheesePos[0]) {
            board[yPos][xPos] = MazeElement.CHEESE;
        } else {
            board[yPos][xPos] = MazeElement.PASSAGE;
        }
    }

    private void moveLeft(MazeElement[][] board, int[] cheesePos) {
        board[yPos][xPos-1] = MazeElement.CAT;

        if (yPos == cheesePos[1] && xPos == cheesePos[0]) {
            board[yPos][xPos] = MazeElement.CHEESE;
        } else {
            board[yPos][xPos] = MazeElement.PASSAGE;
        }
    }

    private void moveDown(MazeElement[][] board, int[] cheesePos) {
        board[yPos+1][xPos] = MazeElement.CAT;

        if (yPos == cheesePos[1] && xPos == cheesePos[0]) {
            board[yPos][xPos] = MazeElement.CHEESE;
        } else {
            board[yPos][xPos] = MazeElement.PASSAGE;
        }
    }

    private void moveUp(MazeElement[][] board, int[] cheesePos) {
        board[yPos-1][xPos] = MazeElement.CAT;

        if (yPos == cheesePos[1] && xPos == cheesePos[0]) {
            board[yPos][xPos] = MazeElement.CHEESE;
        } else {
            board[yPos][xPos] = MazeElement.PASSAGE;
        }
    }
}
